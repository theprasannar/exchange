// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}

// User table: stores authentication info and default balances.
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Balances are stored as atomic values:
  usdcBalance    BigInt    @default(1000000000000)  
  btcBalance     BigInt    @default(5000000000)   

  orders         Order[]
  trades         Trade[]   @relation("UserTrades")
}

// Order table: persists order details from your matching engine.
model Order {
  id        String      @id @default(uuid())
  userId    String
  market    String
  side      OrderSide
  price     BigInt
  quantity  BigInt
  filled    BigInt      @default(0)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  trades    Trade[]     @relation("OrderTrades")
}

enum OrderSide {
  buy
  sell
}


enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELLED
}

// Trade table: records executed trades.
model Trade {
  id            String   @id @default(uuid())
  tradeId       Int      @unique
  market        String
  price         BigInt
  quantity      BigInt
  quoteQuantity BigInt
  isBuyerMaker  Boolean
  timestamp     DateTime

  // Optionally record maker/taker info.
  makerOrderId  String?
  takerOrderId  String?
  makerUserId   String?
  takerUserId   String?
  
  // You can optionally link a trade to an order.
  order   Order?   @relation("OrderTrades", fields: [orderId], references: [id])
  orderId String?

  // Also, optionally link to a user.
  user   User?    @relation("UserTrades", fields: [userId], references: [id])
  userId String?
}

// Ticker table: stores aggregated market ticker data.
model Ticker {
  id        String   @id @default(uuid())
  market    String   @unique
  last      BigInt
  high      BigInt
  low       BigInt
  volume    BigInt
  updatedAt DateTime @default(now())
}

model Kline {
  id         String   @id @default(uuid())
  market     String
  interval   String   // e.g. "1m", "5m", "1h", "1d"
  open       BigInt
  high       BigInt
  low        BigInt
  close      BigInt
  volume     BigInt    // base asset volume
  trades     Int
  startTime  DateTime
  endTime    DateTime
  updatedAt  DateTime  @default(now()) @updatedAt
  
  @@unique([market, interval, startTime])
}

model OrderbookSnapshot {
  id        String   @id @default(uuid())
  market    String   @unique
  snapshot  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}



model AggregatorState {
  id        String   @id @default(uuid())
  market    String
  interval  String
  lastTime  DateTime // The last time we aggregated trades up to
  updatedAt DateTime @default(now()) @updatedAt
  
  @@unique([market, interval])
}
